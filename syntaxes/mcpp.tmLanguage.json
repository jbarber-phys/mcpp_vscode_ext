{
	"scopeName": "source.mcpp",
	"patterns": [
		{
			"include": "#domments"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#coords"
		},
		{
			"include": "#rots"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#strings2"
		},
		{
			"include": "#bools"
		},
		{
			"include": "#targetselectors"
		},
		{
			"include": "#mcfs"
		},
		{
			"include": "#resourcelocations"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#subexecutes"
		},
		{
			"include": "#basictypes"
		},
		{
			"include": "#const_types"
		},
		{
			"include": "#structs"
		},
		{
			"include": "#builtinfunctions"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#names"
		}
	],
	"name": "Mcpp",
	"repository": {
		"basictypes": {
			"name": "keyword.mcpp",
			"match": "\\b(byte|short|int|long|float|double|bool|void)\\b"
		},
		"targetselectors": {
			"captures": {
				"0": {
					"name": "markup.italic.mcpp"
				}
			},
			"match": "(@?[\\w-]+)\\s*\\[(((\\\"(\\\\\\\"|[^\\\"\\n])*\\\"|\\'(\\\\'|[^'\\n])*\\')|[^\\\"\\[\\]\\n]|\\[\\[|\\]\\])*)\\]",
			"name": "entity.name.type.mcpp"
		},
		"comments": {
			"name": "comment.line.mcpp",
			"match": "\\/\\/([^\\n\\/][^\\n]*)(?=\\n|$)"
		},
		"keywords": {
			"name": "keyword.control.mcpp",
			"match": "\\b(if|else|elif|private|public|extern|import|export|while|execute|for|break|return|this|const|ref|final|recursive)\\b"
		},
		"functions": {
			"name": "entity.name.function.mcpp",
			"match": "([a-zA-Z]\\w*)(?=\\s*\\()"
		},
		"structs": {
			"name": "entity.name.type.mcpp",
			"match": "\\b(Vec3i|Entity|String|Vector|Vec3d|Entities)\\b"
		},
		"numbers": {
			"name": "constant.numeric.mcpp",
			"match": "(-?\\d+)(\\.\\d*)?([Ee]\\-?\\d+)?([fdilsbFDILSB])?"
		},
		"rots": {
			"captures": {
				"1": {
					"name": "comment.line.mcpp"
				},
				"8": {
					"name": "keyword.control.mcpp"
				}
			},
			"match": "(?<ang1>(-?(\\d+(\\.\\d*|)|\\.\\d+))|[~](-?(\\d+(\\.\\d*|)|\\.\\d+))|[~])\\s+(?<ang2>(-?(\\d+(\\.\\d*|)|\\.\\d+))|[~](-?(\\d+(\\.\\d*|)|\\.\\d+))|[~])",
			"name": "markup.underline.mcpp"
		},
		"resourcelocations": {
			"captures": {
				"0": {
					"name": "markup.underline.mcpp"
				}
			},
			"match": "(?<namespace>\\w+):(?<path>(\\w+\\/)*(?<end>\\w+))",
			"name": "entity.name.function.mcpp"
		},
		"domments": {
			"captures": {
				"0": {
					"name": "markup.italic.mcpp"
				}
			},
			"match": "\\/\\/\\/([^\\n]*)(?=\\n|$)",
			"name": "comment.block.documentation.mcpp"
		},
		"strings2": {
			"patterns": [
				{
					"name": "constant.character.escape.mcpp",
					"match": "\\\\."
				}
			],
			"end": "'",
			"name": "string.quoted.single.mcpp",
			"begin": "'"
		},
		"builtinfunctions": {
			"captures": {
				"0": {
					"name": "markup.italic.mcpp"
				}
			},
			"match": "\\b(debug|stopLongMult|teleport|warnf|errorf|tp|printf)(?=\\s*\\()",
			"name": "keyword.control.mcpp"
		},
		"bools": {
			"name": "keyword.control.mcpp",
			"match": "\\b(true)|(false)\\b"
		},
		"mcfs": {
			"patterns": [
				{
					"patterns": [
						{
							"name": "constant.character.escape.mcpp",
							"match": "\\\\."
						}
					],
					"end": "\"",
					"name": "string.quoted.double.mcpp",
					"begin": "\""
				},
				{
					"patterns": [
						{
							"name": "constant.character.escape.mcpp",
							"match": "\\\\."
						}
					],
					"end": "'",
					"name": "string.quoted.single.mcpp",
					"begin": "'"
				},
				{
					"include": "#resourcelocations"
				},
				{
					"include": "#targetselectors"
				},
				{
					"captures": {
						"0": {
							"name": "markup.italic.mcpp"
						}
					},
					"match": "(@p|@r|@a|@e|@s)\\b",
					"name": "entity.name.type.mcpp"
				},
				{
					"name": "keyword.control.mcpp",
					"match": "\\b(advancement|attribute|ban|ban-ip|banlist|bossbar|clear|clone|data|datapack|debug|defaultgamemode|deop|difficulty|effect|enchant|execute|experience|fill|forceload|function|gamemode|gamerule|give|help|item|jfr|kick|kill|list|locate|locatebiome|loot|me|msg|op|pardon|pardon-ip|particle|perf|playsound|publish|recipe|reload|save-all|save-off|say|schedule|scoreboard|seed|setblock|setidletimeout|setworldspawn|spawnpoint|spectate|spreadplayers|stop|stopsound|summon|tag|team|teammsg|tm|teleport|tp|tell|tellraw|time|title|trigger|w|weather|whitelist|worldborder|xp)\\b"
				},
				{
					"name": "keyword.mcpp",
					"match": "\\b(if|unless|store|score|entity|storage|block|blocks|positioned|in|rotated|as|at|facing|anchored|run|get|modify|merge|remove|add|set|players|objective|setdisplay|list|force|normal|revoke)\\b"
				}
			],
			"end": "(?=;|\n)",
			"name": "constant.character.escape.mcpp",
			"begin": "\\$/"
		},
		"names": {
			"name": "variable.mcpp",
			"match": "[A-Za-z]\\w*"
		},
		"strings": {
			"patterns": [
				{
					"name": "constant.character.escape.mcpp",
					"match": "\\\\."
				}
			],
			"end": "\"",
			"name": "string.quoted.double.mcpp",
			"begin": "\""
		},
		"operators": {
			"name": "operator.mcpp",
			"match": "~~"
		},
		"subexecutes": {
			"captures": {
				"0": {
					"name": "markup.italic.mcpp"
				}
			},
			"match": "\\b(as|at|in|anchored|asat|positioned|facing|rotated|align)\\b",
			"name": "keyword.control.mcpp"
		},
		"coords": {
			"captures": {
				"1": {
					"name": "invalid.illegal.mcpp"
				},
				"15": {
					"name": "keyword.mcpp"
				},
				"8": {
					"name": "comment.line.mcpp"
				}
			},
			"match": "(?<x>(-?(\\d+(\\.\\d*|)|\\.\\d+))|[\\^~](-?(\\d+(\\.\\d*|)|\\.\\d+))|[\\^~])\\s+(?<y>(-?(\\d+(\\.\\d*|)|\\.\\d+))|[\\^~](-?(\\d+(\\.\\d*|)|\\.\\d+))|[\\^~])\\s+(?<z>(-?(\\d+(\\.\\d*|)|\\.\\d+))|[\\^~](-?(\\d+(\\.\\d*|)|\\.\\d+))|[\\^~])",
			"name": "markup.underline.mcpp"
		},
		"const_types": {
			"captures": {
				"0": {
					"name": "markup.bold.mcpp"
				}
			},
			"match": "\\b(coords|num|flag|text|type|selector|nbt|rot)\\b",
			"name": "keyword.mcpp"
		}
	}
}